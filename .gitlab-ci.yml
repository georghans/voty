variables:
  # Custom Variables used throughout the script

  # When you use the dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket. Docker 19.03 does this automatically
  # by setting the DOCKER_HOST in
  # https://github.com/docker-library/docker/blob/d45051476babc297257df490d22cbd806f1b11e4/19.03/docker-entrypoint.sh#L23-L29
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services.
  #
  # Specify to Docker where to create the certificates. Docker
  # creates them automatically on boot, and creates
  # `/certs/client` to share between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: '/certs'

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  key: $CI_COMMIT_REF_SLUG # cache per branch
  paths:
    - .npm/

stages: # List of stages for jobs, and their order of execution
  - prepare
  - build
  - deploy_child

## PREPARE ##
extract-ticket-number:
  stage: prepare
  image: alpine
  services:
    - name: docker:stable-dind
      alias: docker # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/6295
  script:
    - echo "TICKETNUMBER=$(echo "$CI_COMMIT_BRANCH" | sed 's/\([0-9]\)-.*$/\1/')"  >> build.env
    - less build.env
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  artifacts:
    reports:
      dotenv: build.env # Pass ENV dynamically to next job https://docs.gitlab.com/ee/ci/yaml/#artifactsreportsdotenv

## BUILD ##
build-react:
  stage: build
  image: node:lts
  needs:
    - job: extract-ticket-number
      artifacts: true
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  variables:
    NEXT_TELEMETRY_DISABLED: 1
  script:
    # GITLAB PKG REGISTRY AUTH
    # Consume a package from instance level endpoint with group level deploy token
    # Needs group scoped deployment token for ReadOnly package repository access: PKG_REGISTRY_RO_TOKEN
    # workaround for internal projects (our default): https://gitlab.com/gitlab-org/gitlab/-/issues/333444
    - touch .npmrc
    - |
      {
        echo "@${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/packages/npm/"
        echo "${CI_API_V4_URL#https?}/packages/npm/:_authToken=${VOTY_GROUP_RO_TOKEN}"
        echo "always-auth=true"
      } | tee --append .npmrc

    # INSTALL PACKAGES
    - npm ci # --cache .npm --prefer-offline --no-audit

    # DEVELOP (default branch)
    - |
      if [ $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]; then
        export NEXT_PUBLIC_ENVIRONMENT=development
        npm run build:develop
      fi
  artifacts:
    paths:
      - build
      - .next

deploy-develop-child-pipe:
  stage: deploy_child
  # if this pipeline runs on the default branch
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  trigger:
    include:
      - local: .gitlab/pipelines/develop.yaml
  variables:
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
